<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Alan&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://nullhint.org/"/>
  <updated>2017-10-12T12:22:20.703Z</updated>
  <id>http://nullhint.org/</id>
  
  <author>
    <name>Xibo Li</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java单例模式实现方式</title>
    <link href="http://nullhint.org/2017/10/12/Java_Singleton/"/>
    <id>http://nullhint.org/2017/10/12/Java_Singleton/</id>
    <published>2017-10-12T13:00:00.000Z</published>
    <updated>2017-10-12T12:22:20.703Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>立即加载/“饿汉模式”：</strong>使用类的时候已经创建对象实例。<br><strong>延迟加载/“懒汉模式”：</strong>对象实例的创建延迟到方法调用时。</p></blockquote><h2 id="使用DCL（Double-Check-Locking）双检查锁机制实现单例模式"><a href="#使用DCL（Double-Check-Locking）双检查锁机制实现单例模式" class="headerlink" title="使用DCL（Double-Check Locking）双检查锁机制实现单例模式"></a>使用DCL（Double-Check Locking）双检查锁机制实现单例模式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 定义私有构造器防止被外部实例化。</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Note：注意需要使用volatile。</span></div><div class="line">    <span class="comment">// 另外，JDK1.5之前无法安全地使用DCL的原因是volatile屏蔽指令重排序的语义在JDK1.5中才被完全修复。</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton singleton;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == singleton) &#123;</div><div class="line">            <span class="keyword">synchronized</span> (Singleton.class) &#123;</div><div class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> == singleton) &#123;</div><div class="line">                    singleton = <span class="keyword">new</span> Singleton();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> singleton;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><a id="more"></a><h2 id="使用静态内部类实现单例模式"><a href="#使用静态内部类实现单例模式" class="headerlink" title="使用静态内部类实现单例模式"></a>使用静态内部类实现单例模式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</div><div class="line">    <span class="comment">// 限制产生多个对象</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHandle</span> </span>&#123;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">static</span> Singleton singleton = <span class="keyword">new</span> Singleton();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> SingletonHandle.singleton;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="使用static类变量实现单例模式"><a href="#使用static类变量实现单例模式" class="headerlink" title="使用static类变量实现单例模式"></a>使用static类变量实现单例模式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</div><div class="line">    <span class="comment">// 限制产生多个对象</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton singleton = <span class="keyword">new</span> Singleton();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> singleton;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="使用static代码块实现单例模式"><a href="#使用static代码块实现单例模式" class="headerlink" title="使用static代码块实现单例模式"></a>使用static代码块实现单例模式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton singleton;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> &#123;</div><div class="line">        singleton = <span class="keyword">new</span> Singleton();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> singleton;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="使用enum枚举类型实现单例模式"><a href="#使用enum枚举类型实现单例模式" class="headerlink" title="使用enum枚举类型实现单例模式"></a>使用enum枚举类型实现单例模式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton singleton;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">enum</span> MyEnum &#123;</div><div class="line">        SINGLE;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">private</span> <span class="title">MyEnum</span><span class="params">()</span> </span>&#123;</div><div class="line">            singleton = <span class="keyword">new</span> Singleton();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">private</span> Singleton <span class="title">getSingleton</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> singleton;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> MyEnum.SINGLE.getSingleton();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="序列化与反序列化的单例模式实现"><a href="#序列化与反序列化的单例模式实现" class="headerlink" title="序列化与反序列化的单例模式实现"></a>序列化与反序列化的单例模式实现</h2><p>注意增加了<code>readResolve</code>方法。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 内部类方式实现单例模式</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHandle</span> </span>&#123;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">static</span> Singleton singleton = <span class="keyword">new</span> Singleton();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> SingletonHandle.singleton;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 反序列化时，这个方法会紧挨着readObject()之后被调用，该方法的返回值将会代替原来反序列化的对象，而原来readObject()反序列化的对象将被丢弃</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">readResolve</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> SingletonHandle.singleton;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>测试代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonTest</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="comment">// 序列化</span></div><div class="line">        Singleton singleton = Singleton.getInstance();</div><div class="line">        <span class="keyword">try</span> (ObjectOutputStream outputStream = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(<span class="string">"singleton.txt"</span>)))) &#123;</div><div class="line">            outputStream.writeObject(singleton);</div><div class="line">            System.out.println(singleton.hashCode());</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 反序列化</span></div><div class="line">        <span class="keyword">try</span> (ObjectInputStream inputStream = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(<span class="string">"singleton.txt"</span>)))) &#123;</div><div class="line">            Singleton mySingleton = (Singleton) inputStream.readObject();</div><div class="line">            System.out.println(mySingleton.hashCode());</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException | ClassNotFoundException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;立即加载/“饿汉模式”：&lt;/strong&gt;使用类的时候已经创建对象实例。&lt;br&gt;&lt;strong&gt;延迟加载/“懒汉模式”：&lt;/strong&gt;对象实例的创建延迟到方法调用时。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;使用DCL（Double-Check-Locking）双检查锁机制实现单例模式&quot;&gt;&lt;a href=&quot;#使用DCL（Double-Check-Locking）双检查锁机制实现单例模式&quot; class=&quot;headerlink&quot; title=&quot;使用DCL（Double-Check Locking）双检查锁机制实现单例模式&quot;&gt;&lt;/a&gt;使用DCL（Double-Check Locking）双检查锁机制实现单例模式&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Singleton&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * 定义私有构造器防止被外部实例化。&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Singleton&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Note：注意需要使用volatile。&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 另外，JDK1.5之前无法安全地使用DCL的原因是volatile屏蔽指令重排序的语义在JDK1.5中才被完全修复。&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;volatile&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; Singleton singleton;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; Singleton &lt;span class=&quot;title&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt; == singleton) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;synchronized&lt;/span&gt; (Singleton.class) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt; == singleton) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    singleton = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Singleton();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; singleton;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="设计模式" scheme="http://nullhint.org/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>Java HashMap实现原理</title>
    <link href="http://nullhint.org/2017/09/27/Java_HashMap/"/>
    <id>http://nullhint.org/2017/09/27/Java_HashMap/</id>
    <published>2017-09-27T15:55:29.000Z</published>
    <updated>2017-10-03T06:28:10.536Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HashMap概述"><a href="#HashMap概述" class="headerlink" title="HashMap概述"></a>HashMap概述</h2><p><code>HashMap</code>是基于哈希表的Map接口的<strong>非同步</strong>实现。此实现提供所有可选的映射操作，并<strong>允许使用null值和null键</strong>。此类不保证映射的顺序，特别是它不保证该顺序恒久不变。（Note：此为官方文档描述）<br><strong>关键点：</strong>基于Map接口实现；允许null键/值；非同步；不保证有序(比如插入的顺序)、也不保证序不随时间变化。</p><h2 id="HashMap使用"><a href="#HashMap使用" class="headerlink" title="HashMap使用"></a>HashMap使用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</div><div class="line">map.put(<span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line">map.put(<span class="string">"key"</span>, <span class="string">"value"</span>);</div><div class="line">map.get(<span class="keyword">null</span>);</div><div class="line">map.get(<span class="string">"key"</span>);</div></pre></td></tr></table></figure><a id="more"></a><h2 id="HashMap的术语"><a href="#HashMap的术语" class="headerlink" title="HashMap的术语"></a>HashMap的术语</h2><ul><li>bucket：每个列表被称为桶。</li><li>capacity：散列表数组大小，默认16。</li><li>loadFactor：装填因子用来衡量散列表空间的使用程度，默认0.75。</li><li>threshold：数组大小(capacity) * 装填因子(load factor)。</li><li>拉链法：解决hash冲突的办法。</li></ul><h2 id="HashMap数据结构"><a href="#HashMap数据结构" class="headerlink" title="HashMap数据结构"></a>HashMap数据结构</h2><p><code>HashMap</code>是数组和链表的结合体（<strong>链表数组</strong>），底层是一个数组，数组中每一项又是一个链表。如下图所示：<br><img src="http://owucj827k.bkt.clouddn.com/hashmap/HashMap.jpg" alt="HashMap结构图"><br>当新建一个<code>HashMap</code>的时候，就会初始化一个数组。源码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** </span></div><div class="line"><span class="comment"> * The table, resized as necessary. Length MUST Always be a power of two. </span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">transient</span> Entry[] table;  </div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">final</span> K key;  </div><div class="line">    V value;  </div><div class="line">    Entry&lt;K,V&gt; next;  </div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> hash;  </div><div class="line">    <span class="comment">// ……  </span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><strong>Entry</strong>就是数组中的元素，每个<strong>Map.Entry</strong>其实就是一个key-value对，它持有一个指向下一个元素的引用，这就构成了链表。</p><h2 id="HashMap的存取实现（针对JDK1-7版本）"><a href="#HashMap的存取实现（针对JDK1-7版本）" class="headerlink" title="HashMap的存取实现（针对JDK1.7版本）"></a>HashMap的存取实现（针对JDK1.7版本）</h2><h3 id="存储"><a href="#存储" class="headerlink" title="存储"></a>存储</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</div><div class="line">    <span class="comment">// 初始化存放键值对数据的数组</span></div><div class="line">    <span class="keyword">if</span> (table == EMPTY_TABLE) &#123;</div><div class="line">        inflateTable(threshold);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// HashMap键和值都允许为null，当key为null时，将value放在数组第一个位置</span></div><div class="line">    <span class="keyword">if</span> (key == <span class="keyword">null</span>)</div><div class="line">        <span class="keyword">return</span> putForNullKey(value);</div><div class="line">    <span class="comment">// 对key的hashCode重新做一次hash，避免原来的hash算法不够好导致冲突加剧</span></div><div class="line">    <span class="keyword">int</span> hash = hash(key);</div><div class="line">    <span class="comment">// 根据hash值取得数组中的对应的索引</span></div><div class="line">    <span class="keyword">int</span> i = indexFor(hash, table.length);</div><div class="line">    <span class="comment">// 如果原链表有相同key的值，则替换为新值，并返回旧值</span></div><div class="line">    <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[i]; e != <span class="keyword">null</span>; e = e.next) &#123;</div><div class="line">        Object k;</div><div class="line">        <span class="keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k))) &#123;</div><div class="line">            V oldValue = e.value;</div><div class="line">            e.value = value;</div><div class="line">            e.recordAccess(<span class="keyword">this</span>);</div><div class="line">            <span class="keyword">return</span> oldValue;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 增加HashMap的内容被修改次数，用于多线程快速失败（fail-fast）</span></div><div class="line">    modCount++;</div><div class="line">    <span class="comment">// 将key、value添加到i索引处的链表第一个位置，避免了迭代，效率更高</span></div><div class="line">    <span class="comment">// 并通过拉链法（链表法）解决冲突。</span></div><div class="line">    addEntry(hash, key, value, i);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 计算Hash的的方法。</span></div><div class="line"><span class="comment"> * 此方法加入了高位计算，防止低位不变，高位变化时，造成hash冲突。</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object k)</span> </span>&#123;</div><div class="line">    <span class="comment">// ......</span></div><div class="line">    h ^= (h &gt;&gt;&gt; <span class="number">20</span>) ^ (h &gt;&gt;&gt; <span class="number">12</span>);</div><div class="line">    <span class="keyword">return</span> h ^ (h &gt;&gt;&gt; <span class="number">7</span>) ^ (h &gt;&gt;&gt; <span class="number">4</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 计算数组索引的位置。</span></div><div class="line"><span class="comment"> * 因为数组长度length确保是2的n次方，h&amp;(length-1)等价于h%length，但&amp;比%效率高。</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">indexFor</span><span class="params">(<span class="keyword">int</span> h, <span class="keyword">int</span> length)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> h &amp; (length-<span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="读取"><a href="#读取" class="headerlink" title="读取"></a>读取</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</div><div class="line">    <span class="comment">// key为null，获取数组中索引为0的元素</span></div><div class="line">    <span class="keyword">if</span> (key == <span class="keyword">null</span>)</div><div class="line">        <span class="keyword">return</span> getForNullKey();</div><div class="line">    Entry&lt;K,V&gt; entry = getEntry(key);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span> == entry ? <span class="keyword">null</span> : entry.getValue();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">final</span> Entry&lt;K,V&gt; <span class="title">getEntry</span><span class="params">(Object key)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (size == <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 重新计算hash</span></div><div class="line">    <span class="keyword">int</span> hash = (key == <span class="keyword">null</span>) ? <span class="number">0</span> : hash(key);</div><div class="line">    <span class="comment">// 获取数组中对应的索引的链表，遍历链表，获取对应的key的值</span></div><div class="line">    <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[indexFor(hash, table.length)];</div><div class="line">         e != <span class="keyword">null</span>;</div><div class="line">         e = e.next) &#123;</div><div class="line">        Object k;</div><div class="line">        <span class="keyword">if</span> (e.hash == hash &amp;&amp;</div><div class="line">            ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</div><div class="line">            <span class="keyword">return</span> e;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="HashMap的resize（rehashed）"><a href="#HashMap的resize（rehashed）" class="headerlink" title="HashMap的resize（rehashed）"></a>HashMap的resize（rehashed）</h2><p>散列表太满，为避免散列冲突（hash），就需要再散列（rehashed）。<br>触发再散列的时机：HashMap元素个数 &gt; 数组大小(capacity) * 装填因子(load factor)。<br>再散列的结果：容量是原来的2倍。</p><h2 id="Fail-Fast机制"><a href="#Fail-Fast机制" class="headerlink" title="Fail-Fast机制"></a>Fail-Fast机制</h2><ul><li><code>HashMap</code>不是线程安全的，如果在迭代器使用的过程中HashMap被其他线程修改了，则会抛出<code>ConcurrentModificationException</code>异常。</li><li><strong>实现原理：</strong>使用<code>modCount</code>记录修改次数，迭代器在初始化的时候记录当时的修改记录到<code>expectedModCount</code>，用于迭代过程中与<code>modCount</code>作比较。<br>迭代器初始化方法如下：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">HashIterator() &#123;</div><div class="line">            expectedModCount = modCount;</div><div class="line">            <span class="keyword">if</span> (size &gt; <span class="number">0</span>) &#123; <span class="comment">// advance to first entry</span></div><div class="line">                Entry[] t = table;</div><div class="line">                <span class="keyword">while</span> (index &lt; t.length &amp;&amp; (next = t[index++]) == <span class="keyword">null</span>)</div><div class="line">                    ;</div><div class="line">            &#125;</div><div class="line">        &#125;</div></pre></td></tr></table></figure><p>迭代过程用<code>expectedModCount</code>跟<code>modCount</code>比较，不相等则表示已经被其他线程修改过了，此时抛出异常。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">final</span> Entry&lt;K,V&gt; <span class="title">nextEntry</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (modCount != expectedModCount)</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</div><div class="line">    <span class="comment">// ......</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Fail-fast和Fail-safe有什么区别如下：<br>Iterator的fail-fast属性与当前的集合共同起作用，因此它不会受到集合中任何改动的影响。<code>Java.util</code>包中的所有集合类都被设计为fail-fast的，而<code>java.util.concurrent</code>中的集合类都为fail-safe的。当检测到正在遍历的集合的结构被改变时，Fail-fast迭代器抛出<code>ConcurrentModificationException</code>，而fail-safe迭代器从不抛出<code>ConcurrentModificationException</code>。</p><h2 id="HashMap与Hashtable的区别"><a href="#HashMap与Hashtable的区别" class="headerlink" title="HashMap与Hashtable的区别"></a>HashMap与Hashtable的区别</h2><ul><li><code>Hashtable</code>和<code>HashMap</code>的实现原理非常类似。（注意Hashtable的“t”是小写）</li><li><strong>主要区别</strong>如下：<ol><li><code>Hashtable</code>线程安全。</li><li><code>Hashtable</code>中key和value都不允许null值，<code>HashMap</code>全都允许。</li><li><code>Hashtable</code>使用Enumeration进行遍历，<code>HashMap</code>使用Iterator进行遍历。</li><li><code>Hashtable</code>中hash数组默认大小是11，增加的方式是old*2+1；<code>HashMap</code>中hash数组的默认大小是16，而且一定是2的指数。</li><li>哈希值的使用不同。<code>HashTable</code>直接使用对象的hashCode； <code>HashMap</code>重新计算hash值，而且用与代替求模。</li></ol></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;HashMap概述&quot;&gt;&lt;a href=&quot;#HashMap概述&quot; class=&quot;headerlink&quot; title=&quot;HashMap概述&quot;&gt;&lt;/a&gt;HashMap概述&lt;/h2&gt;&lt;p&gt;&lt;code&gt;HashMap&lt;/code&gt;是基于哈希表的Map接口的&lt;strong&gt;非同步&lt;/strong&gt;实现。此实现提供所有可选的映射操作，并&lt;strong&gt;允许使用null值和null键&lt;/strong&gt;。此类不保证映射的顺序，特别是它不保证该顺序恒久不变。（Note：此为官方文档描述）&lt;br&gt;&lt;strong&gt;关键点：&lt;/strong&gt;基于Map接口实现；允许null键/值；非同步；不保证有序(比如插入的顺序)、也不保证序不随时间变化。&lt;/p&gt;
&lt;h2 id=&quot;HashMap使用&quot;&gt;&lt;a href=&quot;#HashMap使用&quot; class=&quot;headerlink&quot; title=&quot;HashMap使用&quot;&gt;&lt;/a&gt;HashMap使用&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;Map&amp;lt;String, String&amp;gt; map = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; HashMap&amp;lt;String, String&amp;gt;();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;map.put(&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;map.put(&lt;span class=&quot;string&quot;&gt;&quot;key&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;value&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;map.get(&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;map.get(&lt;span class=&quot;string&quot;&gt;&quot;key&quot;&lt;/span&gt;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="JDK源码" scheme="http://nullhint.org/categories/JDK%E6%BA%90%E7%A0%81/"/>
    
    
  </entry>
  
  <entry>
    <title>Java静态代理和动态代理简介</title>
    <link href="http://nullhint.org/2017/09/20/Java_proxy/"/>
    <id>http://nullhint.org/2017/09/20/Java_proxy/</id>
    <published>2017-09-20T03:35:29.000Z</published>
    <updated>2017-10-03T06:32:07.513Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是代理"><a href="#什么是代理" class="headerlink" title="什么是代理"></a>什么是代理</h2><p>给某一个对象提供一个代理，并由代理对象控制对原对象的引用。在不修改源代码的前提下给类增加新功能。</p><h2 id="代理的分类"><a href="#代理的分类" class="headerlink" title="代理的分类"></a>代理的分类</h2><ul><li><strong>静态代理</strong>：代理类在运行前就确定了。</li><li><strong>动态代理</strong>：代理类在运行的时候才动态生成。</li></ul><a id="more"></a><h2 id="静态代理示例"><a href="#静态代理示例" class="headerlink" title="静态代理示例"></a>静态代理示例</h2><ul><li><strong>实现静态代理要点</strong>：<ul><li>代理类和委托类实现相同接口。</li><li>由代理类的构造函数参数传入真正的委托类。</li></ul></li><li><strong>示例场景假设</strong>：由代购帮购买手机，则代购就相当于代理类。代码如下：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 代理和真正的实现类共同实现的接口。</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BuyInterface</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">buyIPhoneX</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 真正的买家。</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Buyer</span> <span class="keyword">implements</span> <span class="title">BuyInterface</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buyIPhoneX</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"=====Buyer buys an iPhoneX."</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 代理类。</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BuyProxy</span> <span class="keyword">implements</span> <span class="title">BuyInterface</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Buyer buyer;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BuyProxy</span><span class="params">(Buyer buyer)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.buyer = buyer;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buyIPhoneX</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"=====Begin...."</span>);</div><div class="line">        buyer.buyIPhoneX();</div><div class="line">        System.out.println(<span class="string">"=====End......"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 测试类。</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        BuyProxy buyProxy = <span class="keyword">new</span> BuyProxy(<span class="keyword">new</span> Buyer());</div><div class="line">        buyProxy.buyIPhoneX();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li><strong>输出结果</strong>如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">=====Begin....</div><div class="line">=====Buyer buys an iPhoneX.</div><div class="line">=====End......</div></pre></td></tr></table></figure></li></ul><h2 id="动态代理示例"><a href="#动态代理示例" class="headerlink" title="动态代理示例"></a>动态代理示例</h2><ul><li><strong>实现动态代理要点</strong>：<ul><li>调用处理器（invocation handler）的invoke方法负责处理所有委托类的方法调用。</li></ul></li><li>上例中代购场景，动态代理版本代码如下：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 代理和真正的实现类共同实现的接口。</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BuyInterface</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">buyIPhoneX</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 真正的买家。</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Buyer</span> <span class="keyword">implements</span> <span class="title">BuyInterface</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buyIPhoneX</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"=====Buyer buys an iPhoneX."</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 统一调用所有方法Handler。</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BuyHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Object target;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BuyHandler</span><span class="params">(Object target)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.target = target;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">        System.out.println(<span class="string">"=====Begin....."</span>);</div><div class="line">        Object result = method.invoke(target, args);</div><div class="line">        System.out.println(<span class="string">"=====End......."</span>);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 测试类。</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        InvocationHandler handler = <span class="keyword">new</span> BuyHandler(<span class="keyword">new</span> Buyer());</div><div class="line">        BuyInterface buyProxy = (BuyInterface) Proxy.newProxyInstance(BuyInterface.class.getClassLoader(),</div><div class="line">                <span class="keyword">new</span> Class&lt;?&gt;[]&#123;BuyInterface.class&#125;, handler);</div><div class="line">        buyProxy.buyIPhoneX();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="动态代理特性"><a href="#动态代理特性" class="headerlink" title="动态代理特性"></a>动态代理特性</h2><ul><li>代理类一旦被创建，就变成了常规类。</li><li>所有代理类都扩展于<code>Proxy</code>类。</li><li>所有代理类都覆盖了<code>Object</code>类中的方法<code>toString</code>、<code>equals</code>和<code>hashCode</code>。</li><li>对于特定的类加载器和预设的一组接口来说，只能有一个代理类。</li><li>代理类一定是<code>public</code>和<code>final</code>。</li><li>如果代理类实现的所有接口都是public，代理类就不属于某个特定的包，否则，所有非公用的接口都必须属于同一个包，同时，代理类也属于这个包。</li></ul><h2 id="代理应用场景"><a href="#代理应用场景" class="headerlink" title="代理应用场景"></a>代理应用场景</h2><p>动态代理主要应用于编译时无法确定需要实现哪个接口的情况。</p><h2 id="实际项目中用到的代理"><a href="#实际项目中用到的代理" class="headerlink" title="实际项目中用到的代理"></a>实际项目中用到的代理</h2><p>Spring AOP封装了JDK和CGLIB的动态代理实现。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是代理&quot;&gt;&lt;a href=&quot;#什么是代理&quot; class=&quot;headerlink&quot; title=&quot;什么是代理&quot;&gt;&lt;/a&gt;什么是代理&lt;/h2&gt;&lt;p&gt;给某一个对象提供一个代理，并由代理对象控制对原对象的引用。在不修改源代码的前提下给类增加新功能。&lt;/p&gt;
&lt;h2 id=&quot;代理的分类&quot;&gt;&lt;a href=&quot;#代理的分类&quot; class=&quot;headerlink&quot; title=&quot;代理的分类&quot;&gt;&lt;/a&gt;代理的分类&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;静态代理&lt;/strong&gt;：代理类在运行前就确定了。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;动态代理&lt;/strong&gt;：代理类在运行的时候才动态生成。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Java" scheme="http://nullhint.org/categories/Java/"/>
    
    
  </entry>
  
</feed>
