<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Alan&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://nullhint.org/"/>
  <updated>2017-09-20T16:18:28.188Z</updated>
  <id>http://nullhint.org/</id>
  
  <author>
    <name>Xibo Li</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java静态代理和动态代理简介</title>
    <link href="http://nullhint.org/2017/09/20/Java_proxy/"/>
    <id>http://nullhint.org/2017/09/20/Java_proxy/</id>
    <published>2017-09-20T03:35:29.000Z</published>
    <updated>2017-09-20T16:18:28.188Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是代理"><a href="#什么是代理" class="headerlink" title="什么是代理"></a>什么是代理</h2><p>给某一个对象提供一个代理，并由代理对象控制对原对象的引用。在不修改源代码的前提下给类增加新功能。</p><h2 id="代理的分类"><a href="#代理的分类" class="headerlink" title="代理的分类"></a>代理的分类</h2><ul><li><strong>静态代理</strong>：代理类在运行前就确定了。</li><li><strong>动态代理</strong>：代理类在运行的时候才动态生成。</li></ul><h2 id="静态代理示例"><a href="#静态代理示例" class="headerlink" title="静态代理示例"></a>静态代理示例</h2><ul><li><strong>实现静态代理要点</strong>：<ul><li>代理类和委托类实现相同接口。</li><li>由代理类的构造函数参数传入真正的委托类。</li></ul></li><li><strong>示例场景假设</strong>：由代购帮购买手机，则代购就相当于代理类。代码如下：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 代理和真正的实现类共同实现的接口。</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BuyInterface</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">buyIPhoneX</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 真正的买家。</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Buyer</span> <span class="keyword">implements</span> <span class="title">BuyInterface</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buyIPhoneX</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"=====Buyer buys an iPhoneX."</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 代理类。</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BuyProxy</span> <span class="keyword">implements</span> <span class="title">BuyInterface</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Buyer buyer;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BuyProxy</span><span class="params">(Buyer buyer)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.buyer = buyer;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buyIPhoneX</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"=====Begin...."</span>);</div><div class="line">        buyer.buyIPhoneX();</div><div class="line">        System.out.println(<span class="string">"=====End......"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 测试类。</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        BuyProxy buyProxy = <span class="keyword">new</span> BuyProxy(<span class="keyword">new</span> Buyer());</div><div class="line">        buyProxy.buyIPhoneX();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li><strong>输出结果</strong>如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">=====Begin....</div><div class="line">=====Buyer buys an iPhoneX.</div><div class="line">=====End......</div></pre></td></tr></table></figure></li></ul><h2 id="动态代理示例"><a href="#动态代理示例" class="headerlink" title="动态代理示例"></a>动态代理示例</h2><ul><li><strong>实现动态代理要点</strong>：<ul><li>调用处理器（invocation handler）的invoke方法负责处理所有委托类的方法调用。</li></ul></li><li>上例中代购场景，动态代理版本代码如下：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 代理和真正的实现类共同实现的接口。</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BuyInterface</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">buyIPhoneX</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 真正的买家。</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Buyer</span> <span class="keyword">implements</span> <span class="title">BuyInterface</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buyIPhoneX</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"=====Buyer buys an iPhoneX."</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 统一调用所有方法Handler。</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BuyHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Object target;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BuyHandler</span><span class="params">(Object target)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.target = target;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">        System.out.println(<span class="string">"=====Begin....."</span>);</div><div class="line">        Object result = method.invoke(target, args);</div><div class="line">        System.out.println(<span class="string">"=====End......."</span>);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 测试类。</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        InvocationHandler handler = <span class="keyword">new</span> BuyHandler(<span class="keyword">new</span> Buyer());</div><div class="line">        BuyInterface buyProxy = (BuyInterface) Proxy.newProxyInstance(BuyInterface.class.getClassLoader(),</div><div class="line">                <span class="keyword">new</span> Class&lt;?&gt;[]&#123;BuyInterface.class&#125;, handler);</div><div class="line">        buyProxy.buyIPhoneX();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="动态代理特性"><a href="#动态代理特性" class="headerlink" title="动态代理特性"></a>动态代理特性</h2><ul><li>代理类一旦被创建，就变成了常规类。</li><li>所有代理类都扩展于<code>Proxy</code>类。</li><li>所有代理类都覆盖了<code>Object</code>类中的方法<code>toString</code>、<code>equals</code>和<code>hashCode</code>。</li><li>对于特定的类加载器和预设的一组接口来说，只能有一个代理类。</li><li>代理类一定是<code>public</code>和<code>final</code>。</li><li>如果代理类实现的所有接口都是public，代理类就不属于某个特定的包，否则，所有非公用的接口都必须属于同一个包，同时，代理类也属于这个包。</li></ul><h2 id="代理应用场景"><a href="#代理应用场景" class="headerlink" title="代理应用场景"></a>代理应用场景</h2><p>动态代理主要应用于编译时无法确定需要实现哪个接口的情况。</p><h2 id="实际项目中用到的代理"><a href="#实际项目中用到的代理" class="headerlink" title="实际项目中用到的代理"></a>实际项目中用到的代理</h2><p>Spring AOP封装了JDK和CGLIB的动态代理实现。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是代理&quot;&gt;&lt;a href=&quot;#什么是代理&quot; class=&quot;headerlink&quot; title=&quot;什么是代理&quot;&gt;&lt;/a&gt;什么是代理&lt;/h2&gt;&lt;p&gt;给某一个对象提供一个代理，并由代理对象控制对原对象的引用。在不修改源代码的前提下给类增加新功能。&lt;/p&gt;
&lt;h2 i
      
    
    </summary>
    
      <category term="Java" scheme="http://nullhint.org/categories/Java/"/>
    
    
  </entry>
  
</feed>
